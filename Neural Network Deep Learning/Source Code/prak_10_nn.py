# -*- coding: utf-8 -*-
"""PRAK 10_NN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/199Oe-y_dzxF-Px4qWaaTSkfaMcVQb_N5
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, LSTM, Dense
from sklearn.metrics import classification_report

# Load IMDb dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.imdb.load_data(num_words=10000)

# Padding sequences to make sure all reviews have the same length
x_train = pad_sequences(x_train, maxlen=200)
x_test = pad_sequences(x_test, maxlen=200)

# Encode labels (positive/negative)
y_train = np.array(y_train)
y_test = np.array(y_test)

# Function to build and train models
def train_model(model_type='RNN'):
    model = Sequential()
    model.add(Embedding(input_dim=10000, output_dim=64, input_length=200))

    if model_type == 'RNN':
        model.add(SimpleRNN(64, return_sequences=False))
    elif model_type == 'LSTM':
        model.add(LSTM(64, return_sequences=False))

    model.add(Dense(1, activation='sigmoid'))

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    print(f"\nTraining {model_type} Model")
    history = model.fit(x_train, y_train, epochs=5, batch_size=64, validation_data=(x_test, y_test))

    return model, history

# Train RNN
rnn_model, rnn_history = train_model('RNN')

# Train LSTM
lstm_model, lstm_history = train_model('LSTM')

# Visualize Training vs Validation Loss
plt.figure(figsize=(12, 6))
plt.plot(rnn_history.history['val_loss'], label='RNN - Validation Loss')
plt.plot(lstm_history.history['val_loss'], label='LSTM - Validation Loss')
plt.plot(rnn_history.history['loss'], '--', label='RNN - Training Loss')
plt.plot(lstm_history.history['loss'], '--', label='LSTM - Training Loss')
plt.title('Training vs Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Evaluasi RNN
print("\nEvaluasi RNN:")
rnn_predictions = (rnn_model.predict(x_test) > 0.5).astype(int)
print(classification_report(y_test, rnn_predictions, target_names=["Negatif", "Positif"]))

# Evaluasi LSTM
print("\nEvaluasi LSTM:")
lstm_predictions = (lstm_model.predict(x_test) > 0.5).astype(int)
print(classification_report(y_test, lstm_predictions, target_names=["Negatif", "Positif"]))

# Menampilkan prediksi menggunakan model RNN dan LSTM
def show_predictions(model, x_test, y_test, model_name):
    print(f"\nHasil Prediksi {model_name}:\n")

    for i in range(5):  # Menampilkan 5 contoh prediksi
        review = ' '.join([str(word) for word in x_test[i]])  # Mengubah ID menjadi kata
        prediction = (model.predict(x_test[i:i+1]) > 0.5).astype(int)  # Prediksi untuk 1 review
        sentiment = 'Positif' if prediction == 1 else 'Negatif'
        actual_sentiment = 'Positif' if y_test[i] == 1 else 'Negatif'

        print(f"Review: {review}\nPrediksi Sentimen: {sentiment}\nSentimen Sebenarnya: {actual_sentiment}\n")

# Prediksi menggunakan model RNN
show_predictions(rnn_model, x_test, y_test, "RNN")

# Prediksi menggunakan model LSTM
show_predictions(lstm_model, x_test, y_test, "LSTM")

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, LSTM, Dense
from sklearn.metrics import classification_report

# Load IMDb dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.imdb.load_data(num_words=10000)

# Padding sequences to make sure all reviews have the same length
x_train = pad_sequences(x_train, maxlen=200)
x_test = pad_sequences(x_test, maxlen=200)

# Encode labels (positive/negative)
y_train = np.array(y_train)
y_test = np.array(y_test)

# Function to build and train models
def train_model(model_type='RNN'):
    model = Sequential()
    model.add(Embedding(input_dim=10000, output_dim=64, input_length=200))

    if model_type == 'RNN':
        model.add(SimpleRNN(64, return_sequences=False))
    elif model_type == 'LSTM':
        model.add(LSTM(64, return_sequences=False))

    model.add(Dense(1, activation='sigmoid'))

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    print(f"\nTraining {model_type} Model")
    history = model.fit(x_train, y_train, epochs=5, batch_size=500, validation_data=(x_test, y_test))

    return model, history

# Train RNN
rnn_model, rnn_history = train_model('RNN')

# Train LSTM
lstm_model, lstm_history = train_model('LSTM')

# Visualize Training vs Validation Loss
plt.figure(figsize=(12, 6))
plt.plot(rnn_history.history['val_loss'], label='RNN - Validation Loss')
plt.plot(lstm_history.history['val_loss'], label='LSTM - Validation Loss')
plt.plot(rnn_history.history['loss'], '--', label='RNN - Training Loss')
plt.plot(lstm_history.history['loss'], '--', label='LSTM - Training Loss')
plt.title('Training vs Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Evaluasi RNN
print("\nEvaluasi RNN:")
rnn_predictions = (rnn_model.predict(x_test) > 0.5).astype(int)
print(classification_report(y_test, rnn_predictions, target_names=["Negatif", "Positif"]))

# Evaluasi LSTM
print("\nEvaluasi LSTM:")
lstm_predictions = (lstm_model.predict(x_test) > 0.5).astype(int)
print(classification_report(y_test, lstm_predictions, target_names=["Negatif", "Positif"]))

# Menampilkan prediksi menggunakan model RNN dan LSTM
def show_predictions(model, x_test, y_test, model_name):
    print(f"\nHasil Prediksi {model_name}:\n")

    for i in range(5):  # Menampilkan 5 contoh prediksi
        review = ' '.join([str(word) for word in x_test[i]])  # Mengubah ID menjadi kata
        prediction = (model.predict(x_test[i:i+1]) > 0.5).astype(int)  # Prediksi untuk 1 review
        sentiment = 'Positif' if prediction == 1 else 'Negatif'
        actual_sentiment = 'Positif' if y_test[i] == 1 else 'Negatif'

        print(f"Review: {review}\nPrediksi Sentimen: {sentiment}\nSentimen Sebenarnya: {actual_sentiment}\n")

# Prediksi menggunakan model RNN
show_predictions(rnn_model, x_test, y_test, "RNN")

# Prediksi menggunakan model LSTM
show_predictions(lstm_model, x_test, y_test, "LSTM")