# -*- coding: utf-8 -*-
"""Prak 9_NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnSC6PhxGHHDZGnTgv83QvU-eLmiy6SD
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense

# Membuat data sekuensial sederhana
def generate_data(seq_length=50, num_samples=1000):
    X = []
    y = []
    for _ in range(num_samples):
        seq = np.sin(np.linspace(0, 2 * np.pi, seq_length))
        noise = np.random.normal(0, 0.1, seq_length)
        seq = seq + noise
        X.append(seq[:-1])  # Semua kecuali elemen terakhir
        y.append(seq[1:])   # Semua kecuali elemen pertama
    return np.array(X), np.array(y)

# Membuat data latih dan uji
seq_length = 50
X, y = generate_data(seq_length)
X = X[..., np.newaxis]  # Menambahkan dimensi untuk fitur (batch_size, timesteps, input_dim)
y = y[..., np.newaxis]

# Membagi data menjadi training dan testing
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Membuat model RNN
model = Sequential([
    SimpleRNN(50, activation='tanh', input_shape=(seq_length-1, 1)),
    Dense(1)
])

# Kompilasi model
model.compile(optimizer='adam', loss='mse')

# Melatih model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# Evaluasi model
loss = model.evaluate(X_test, y_test)
print(f"Loss on test data: {loss}")

# Prediksi contoh data
predictions = model.predict(X_test[:5])
print("Predictions:")
print(predictions)